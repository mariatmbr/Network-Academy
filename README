

Cerința 1 - get_oldest_influence

    Pentru rezolvarea acestei cerințe am folosit două hashtable-uri: 
papers_ht și visited_ht. Pentru aceasta am folosit mai multe funcții ajutătoare.
    Funcția clearVisited are rolul de a elibera memoria din hashtable-ul
visited_ht și de a crea un hashtable visited_ht nou.
    Funcția setVisited marchează un element ca fiind vizitat.
    Funcția get_oldest_paper întoarce cel mai vechi articol dintre cele două
primite, pe baza celor trei criterii din cerintă.
    Funcția get_oldest_inf_helper parcurge  lista de citări (references)
caracteristică unui articol și verifică dacă cel puțin unul dintre articolele
citate depinde de articolul pentru care se face (recursiv) căutarea.

Cerința 2 - get_venue_impact_factor

    În cazul acestei cerințe am folosit două hashtable-uri: venue_total_ht și 
venue_cnt_ht. Primul dintre ele conține numărul total de citări ale articolelor,
iar venue_cnt_ht conține numărul de articole din jurnal.
    Media am făcut-o folosind formula mediei aritmetice. 

Cerința 4 - get_erdos_distance

	Pentru a determina disanța erdos, pe măsură ce adăugam paper-urile, rețineam
pentru fiecare autor în parte „vecinii”, într-o structură de tip author_t care
poate să fie apoi accesată cu ajutorul unui hashtable din PublData. Am făcut
apoi un bfs pe graful de autori, pornind de la cel al cărui id este primit ca
parametru (id1).
	Pentru aceasta am folosit un hashtable auxiliar în care cheia
este id-ul unui autor, iar data reținută distanța de la primul autor în cazul în
care fusese deja vizitat și o coadă. Parcurgerea se oprește în momentul în care
este găsit un autor cu id-ul cerut (id2).

Cerința 6 - get_number_of_papers_between_dates

	Pentru a determina câte articole au fost publicate în fiecare an am adăugat în
PublData un vector de frecvență (year_cnt) în care year_cnt[AN] reprezintă
numărul de paper-uri publicate în anul AN. Apoi am calculat suma cerută,
parcurgând vectorul de frecvență de la poziția early_date, la poziția late_date.

Cerința 7 - get_number_of_authors_with_field

    Pentru rezolvarea acestei cerințe m-am gândit să am un hashtable în care 
cheia să fie un string obținut prin concatenarea celor două caracteristici
(instituția și domeniul). Am folosit, asadar, hashtable-ul inst_and_field_ht
din care am extras numărul de autori din instituția primită ca parametru
(cei care au scris cel puțin un articol în domeniul dorit).

Cerința 8 - get_histogram_of_citations

    Pentru această cerință am avut nevoie de hashtable-ul de autori și de 
hashtable-ul de articole. Am presupus că voi începe căutarea din anul 2021. Am
extras informația despre articolele scrise de acel autor, apoi am actualizat 
vectorul de ani, utilizând funcția get_ciations în baza tuturor articolelor
scrise de autorul dat ca parametru.

Cerința 9 - get_reading_order

	În cazul acestei cerințe, abordarea este asemănătoare cu cea de la
get_erdos_distance, doar că de acestă dată parcurgerea bfs se face pe graful de
paper-uri, iar parcurgerea se oprește când am ajuns la o distanță mai mare decât
cea primită ca parametru. La final, coada (în care se află toate paper-urile
care îndeplinesc condițiile impuse) este sortată în funcție de anul apariției și
id.

